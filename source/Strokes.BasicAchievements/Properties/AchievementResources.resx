<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="UpperBoundaryValueIntName" xml:space="preserve">
    <value>Living on the edge</value>
  </data>
  <data name="UpperBoundaryValueIntDescription" xml:space="preserve">
    <value>Assign the maximal allowed value to an integer (beware the overflow!)</value>
  </data>
  <data name="LowerBoundaryValueIntName" xml:space="preserve">
    <value>Living on the negative edge</value>
  </data>
  <data name="LowerBoundaryValueIntDescription" xml:space="preserve">
    <value>Assign the minimal allowed value to an integer (beware the overflow!)</value>
  </data>
  <data name="MultipleDeclareCharName" xml:space="preserve">
    <value>Declare multiple chars in one statement</value>
  </data>
  <data name="MultipleDeclareCharDescription" xml:space="preserve">
    <value>Declare multiple chars in one go</value>
  </data>
  <data name="OverrideGetHashCodeAchievementName" xml:space="preserve">
    <value>ID object</value>
  </data>
  <data name="OverrideGetHashCodeAchievementDescription" xml:space="preserve">
    <value>Override System.Object.GetHashCode() method</value>
  </data>
  <data name="DoWhileLoopAchievementName" xml:space="preserve">
    <value>DoWhile loop</value>
  </data>
  <data name="DoWhileLoopAchievementDescription" xml:space="preserve">
    <value>Use a do-while loop</value>
  </data>
  <data name="InfiniteWhileLoopAchievementName" xml:space="preserve">
    <value>Infinite while loop</value>
  </data>
  <data name="InfiniteWhileLoopAchievementDescription" xml:space="preserve">
    <value>Create an infinite while-loop</value>
  </data>
  <data name="CreateMethodAchievementName" xml:space="preserve">
    <value>Method man</value>
  </data>
  <data name="CreateMethodAchievementDescription" xml:space="preserve">
    <value>Create a method</value>
  </data>
  <data name="ConstKeywordAchievementName" xml:space="preserve">
    <value>Create a constant</value>
  </data>
  <data name="ConstKeywordAchievementDescription" xml:space="preserve">
    <value>Use the const keyword</value>
  </data>
  <data name="InstantiateObjectWithInitAchievementName" xml:space="preserve">
    <value>Create object with initializers</value>
  </data>
  <data name="InstantiateObjectWithInitAchievementDescription" xml:space="preserve">
    <value>Create an object using object initializer notation</value>
  </data>
  <data name="TryCatchFinallyStatementAchievementName" xml:space="preserve">
    <value>Try-Catch-Finally Statement</value>
  </data>
  <data name="TryCatchFinallyStatementAchievementDescription" xml:space="preserve">
    <value>Use a try-catch-finally statement</value>
  </data>
  <data name="CreateAutoPropertyAchievementName" xml:space="preserve">
    <value>Prop [Tab][Tab]</value>
  </data>
  <data name="CreateAutoPropertyAchievementDescription" xml:space="preserve">
    <value>Create an auto property </value>
  </data>
  <data name="CreateMethodReturnVoidAchievementName" xml:space="preserve">
    <value>Into the void</value>
  </data>
  <data name="CreateMethodReturnVoidAchievementDescription" xml:space="preserve">
    <value>Create a method that returns void</value>
  </data>
  <data name="CreateMethodReturnIntAchievementName" xml:space="preserve">
    <value>Return int</value>
  </data>
  <data name="CreateMethodReturnIntAchievementDescription" xml:space="preserve">
    <value>Create a method that returns an int</value>
  </data>
  <data name="CreateMethodReturnStringAchievementName" xml:space="preserve">
    <value>Return a string</value>
  </data>
  <data name="CreateMethodReturnStringAchievementDescription" xml:space="preserve">
    <value>Create a method that returns a string</value>
  </data>
  <data name="CreateMethodReturnBoolAchievementName" xml:space="preserve">
    <value>Return a bool</value>
  </data>
  <data name="CreateMethodReturnBoolAchievementDescription" xml:space="preserve">
    <value>Create a method that returns a boolean</value>
  </data>
  <data name="CreateMethodReturnCharAchievementName" xml:space="preserve">
    <value>Return char</value>
  </data>
  <data name="CreateMethodReturnCharAchievementDescription" xml:space="preserve">
    <value>Create a method that returns a char</value>
  </data>
  <data name="CreateMethodReturnDoubleAchievementName" xml:space="preserve">
    <value>Return double</value>
  </data>
  <data name="CreateMethodReturnDoubleAchievementDescription" xml:space="preserve">
    <value>Create a method that returns a double</value>
  </data>
  <data name="CreateMethodReturnFloatAchievementName" xml:space="preserve">
    <value>Return float</value>
  </data>
  <data name="CreateMethodReturnFloatAchievementDescription" xml:space="preserve">
    <value>Create a method that returns a float</value>
  </data>
  <data name="JaggedArrayAchievementName" xml:space="preserve">
    <value>JAG</value>
  </data>
  <data name="JaggedArrayAchievementDescription" xml:space="preserve">
    <value>Declare a jagged multidimensional array ([][] instead of [,])</value>
  </data>
  <data name="DeclareIntName" xml:space="preserve">
    <value>Declare an int</value>
  </data>
  <data name="DeclareIntDescription" xml:space="preserve">
    <value>Declare, but do not initialize, an int in one statement</value>
  </data>
  <data name="DeclareInitializeIntName" xml:space="preserve">
    <value>Declare and initialize an int</value>
  </data>
  <data name="DeclareInitializeIntDescription" xml:space="preserve">
    <value>Declare and initialize an int in one statement</value>
  </data>
  <data name="MultipleDeclareFloatName" xml:space="preserve">
    <value>Declare multiple floats in one statement</value>
  </data>
  <data name="MultipleDeclareFloatDescription" xml:space="preserve">
    <value>Declare multiple floats in one go</value>
  </data>
  <data name="DeclareInitializeFloatName" xml:space="preserve">
    <value>Declare and initialize float</value>
  </data>
  <data name="DeclareInitializeFloatDescription" xml:space="preserve">
    <value>Declare and initialize a float in one statement</value>
  </data>
  <data name="MultipleDeclareDoubleName" xml:space="preserve">
    <value>Declare multiple doubles in one statement</value>
  </data>
  <data name="MultipleDeclareDoubleDescription" xml:space="preserve">
    <value>Declare multiple doubles in one go</value>
  </data>
  <data name="PrintToConsoleAchievementName" xml:space="preserve">
    <value>Ghost in the Shell</value>
  </data>
  <data name="PrintToConsoleAchievementDescription" xml:space="preserve">
    <value>Print something to the console</value>
  </data>
  <data name="ForEachWithEnumAchievementName" xml:space="preserve">
    <value>Enumerate an enumeration</value>
  </data>
  <data name="ForEachWithEnumAchievementDescription" xml:space="preserve">
    <value>Use a foreach loop to enumerate over all elements of ...an enumeration.</value>
  </data>
  <data name="PrintNewLineAchievementName" xml:space="preserve">
    <value>Print a newline using \n</value>
  </data>
  <data name="PrintNewLineAchievementDescription" xml:space="preserve">
    <value>Print a newline to the console using \n</value>
  </data>
  <data name="PrintHorizontalTabAchievementName" xml:space="preserve">
    <value>Print a tab using \t</value>
  </data>
  <data name="PrintHorizontalTabAchievementDescription" xml:space="preserve">
    <value>Print a horizontal tab to the console using \t</value>
  </data>
  <data name="PrintQuoteCharAchievementName" xml:space="preserve">
    <value>Print a " using \"</value>
  </data>
  <data name="PrintQuoteCharAchievementDescription" xml:space="preserve">
    <value>Print a quote (") to the console using \"</value>
  </data>
  <data name="PrintSingleQuoteCharAchievementName" xml:space="preserve">
    <value>Print a ' using \'</value>
  </data>
  <data name="PrintSingleQuoteCharAchievementDescription" xml:space="preserve">
    <value>Print a quote (') to the console using \'</value>
  </data>
  <data name="PrintBackSlashCharAchievementName" xml:space="preserve">
    <value>Print a \ using \\</value>
  </data>
  <data name="PrintBackSlashCharAchievementDescription" xml:space="preserve">
    <value>Print a backslash (\) to the console using \\</value>
  </data>
  <data name="BeastNumberAchievementName" xml:space="preserve">
    <value>The number of the beast...</value>
  </data>
  <data name="BeastNumberAchievementDescription" xml:space="preserve">
    <value>Assign a value of 666 to an integer</value>
  </data>
  <data name="TryCatchIgnoreStatementAchievementName" xml:space="preserve">
    <value>Try-Catch-Ignore</value>
  </data>
  <data name="TryCatchIgnoreStatementAchievementDescription" xml:space="preserve">
    <value>Write an empty catch statement</value>
  </data>
  <data name="CalculatorChallengeName" xml:space="preserve">
    <value>Calculator</value>
  </data>
  <data name="CalculatorChallengeDescription" xml:space="preserve">
    <value>Implement the ICalculator interface</value>
  </data>
  <data name="TypeOfAchievementName" xml:space="preserve">
    <value>Typeof</value>
  </data>
  <data name="TypeOfAchievementDescription" xml:space="preserve">
    <value>Use typeof keyword</value>
  </data>
  <data name="AssignIntName" xml:space="preserve">
    <value>Assign an integer value</value>
  </data>
  <data name="AssignIntDescription" xml:space="preserve">
    <value>Assign a value to an existing integer variable</value>
  </data>
  <data name="IfShorthandAchievementName" xml:space="preserve">
    <value>?:</value>
  </data>
  <data name="IfShorthandAchievementDescription" xml:space="preserve">
    <value>Write a conditional expression</value>
  </data>
  <data name="NestedIfStatementAchievementName" xml:space="preserve">
    <value>If-in-if</value>
  </data>
  <data name="NestedIfStatementAchievementDescription" xml:space="preserve">
    <value>Write an if statement inside another if</value>
  </data>
  <data name="AssignCharName" xml:space="preserve">
    <value>Assign a char value</value>
  </data>
  <data name="AssignCharDescription" xml:space="preserve">
    <value>Assign a value to an existing char variable</value>
  </data>
  <data name="ParamsParameterAchievementName" xml:space="preserve">
    <value>Params Parameter</value>
  </data>
  <data name="ParamsParameterAchievementDescription" xml:space="preserve">
    <value>Write a method that uses the params keyword in its arguments</value>
  </data>
  <data name="ConvertToCharAchievementName" xml:space="preserve">
    <value>Convert to Char</value>
  </data>
  <data name="ConvertToCharAchievementDescription" xml:space="preserve">
    <value>Use the Convert.ToChar method</value>
  </data>
  <data name="ConvertToDecimalAchievementName" xml:space="preserve">
    <value>Convert to Decimal</value>
  </data>
  <data name="ConvertToDecimalAchievementDescription" xml:space="preserve">
    <value>Use the Convert.ToDecimal method</value>
  </data>
  <data name="ConvertToDoubleAchievementName" xml:space="preserve">
    <value>Convert to double</value>
  </data>
  <data name="ConvertToDoubleAchievementDescription" xml:space="preserve">
    <value>Use the Convert.ToDouble method</value>
  </data>
  <data name="ConvertToInt32AchievementName" xml:space="preserve">
    <value>Convert to Int32</value>
  </data>
  <data name="ConvertToInt32AchievementDescription" xml:space="preserve">
    <value>Use the Convert.ToInt32 method</value>
  </data>
  <data name="TooManyDimensionArrayDeclarationAchievementName" xml:space="preserve">
    <value>Solving string theory?</value>
  </data>
  <data name="TooManyDimensionArrayDeclarationAchievementDescription" xml:space="preserve">
    <value>You've declared an array with more than 11 dimensions</value>
  </data>
  <data name="CreateClassAchievementName" xml:space="preserve">
    <value>Classy!</value>
  </data>
  <data name="CreateClassAchievementDescription" xml:space="preserve">
    <value>Create a class</value>
  </data>
  <data name="CreateOverloadedConstructorAchievementName" xml:space="preserve">
    <value>Bob the Overloaded Constructor</value>
  </data>
  <data name="CreateOverloadedConstructorAchievementDescription" xml:space="preserve">
    <value>Write a overloaded class constructor</value>
  </data>
  <data name="DeclareDoubleName" xml:space="preserve">
    <value>Declare a double</value>
  </data>
  <data name="DeclareDoubleDescription" xml:space="preserve">
    <value>Declare, but do not initialize, a double in one statement</value>
  </data>
  <data name="OperatorOrAchievementName" xml:space="preserve">
    <value>Use OR (||) operator</value>
  </data>
  <data name="OperatorOrAchievementDescription" xml:space="preserve">
    <value>Make use of the OR operator</value>
  </data>
  <data name="CreatePropertyAchievementName" xml:space="preserve">
    <value>Create a property</value>
  </data>
  <data name="CreatePropertyAchievementDescription" xml:space="preserve">
    <value>Write a property of any type </value>
  </data>
  <data name="FormatSpecifierAchievementName" xml:space="preserve">
    <value>Format Specifier</value>
  </data>
  <data name="FormatSpecifierAchievementDescription" xml:space="preserve">
    <value>Print something to the console using a format specifier</value>
  </data>
  <data name="CreateThisConstructorInitAchievementName" xml:space="preserve">
    <value>Dis a constructor</value>
  </data>
  <data name="CreateThisConstructorInitAchievementDescription" xml:space="preserve">
    <value>Call another constructor using the this keyword from a constructor</value>
  </data>
  <data name="DeclareInitArrayAchievementName" xml:space="preserve">
    <value>Declare and initialize an array with an initializer list</value>
  </data>
  <data name="DeclareInitArrayAchievementDescription" xml:space="preserve">
    <value>Declare and initialize an array with an initializer list</value>
  </data>
  <data name="InlineCommentAchievementName" xml:space="preserve">
    <value>Inline Commentary</value>
  </data>
  <data name="InlineCommentAchievementDescription" xml:space="preserve">
    <value>Write an inline comment</value>
  </data>
  <data name="DeclareFloatName" xml:space="preserve">
    <value>Declare a float</value>
  </data>
  <data name="DeclareFloatDescription" xml:space="preserve">
    <value>Declare, but do not initialize, a float in one statement</value>
  </data>
  <data name="DeclareHexShorthandCharAchievementName" xml:space="preserve">
    <value>I talk in hex</value>
  </data>
  <data name="DeclareHexShorthandCharAchievementDescription" xml:space="preserve">
    <value>Use hexadecimal shorthand to create a char</value>
  </data>
  <data name="DestructorAchievementName" xml:space="preserve">
    <value>My name is Destructor!</value>
  </data>
  <data name="DestructorAchievementDescription" xml:space="preserve">
    <value>Define a destructor for your class</value>
  </data>
  <data name="OverrideToStringAchievementName" xml:space="preserve">
    <value>ToString()</value>
  </data>
  <data name="OverrideToStringAchievementDescription" xml:space="preserve">
    <value>Override System.Object.ToString() method</value>
  </data>
  <data name="WhileLoopAchievementName" xml:space="preserve">
    <value>While loop</value>
  </data>
  <data name="WhileLoopAchievementDescription" xml:space="preserve">
    <value>Use a while loop</value>
  </data>
  <data name="AssignDoubleName" xml:space="preserve">
    <value>Assign a double value</value>
  </data>
  <data name="AssignDoubleDescription" xml:space="preserve">
    <value>Assign a value to an existing double variable</value>
  </data>
  <data name="DefaultCaseInSwitchSwitchAchievementName" xml:space="preserve">
    <value>Define a default switch case</value>
  </data>
  <data name="DefaultCaseInSwitchSwitchAchievementDescription" xml:space="preserve">
    <value>Create a default case in a  switch statement</value>
  </data>
  <data name="DeclareEscapeCharAchievementName" xml:space="preserve">
    <value>Escape char</value>
  </data>
  <data name="DeclareEscapeCharAchievementDescription" xml:space="preserve">
    <value>Declare an escape character char</value>
  </data>
  <data name="OutParameterAchievementName" xml:space="preserve">
    <value>Out Parameter</value>
  </data>
  <data name="OutParameterAchievementDescription" xml:space="preserve">
    <value>Write a method that uses the out keyword in its arguments</value>
  </data>
  <data name="ExtensionMethodAchievementName" xml:space="preserve">
    <value>Extended!</value>
  </data>
  <data name="ExtensionMethodAchievementDescription" xml:space="preserve">
    <value>Create an extension method</value>
  </data>
  <data name="CreateDefaultConstructorAchievementName" xml:space="preserve">
    <value>Explicit default</value>
  </data>
  <data name="CreateDefaultConstructorAchievementDescription" xml:space="preserve">
    <value>Write a default class constructor</value>
  </data>
  <data name="AssignFloatName" xml:space="preserve">
    <value>Assign a float value</value>
  </data>
  <data name="AssignFloatDescription" xml:space="preserve">
    <value>Assign a value to an existing float variable</value>
  </data>
  <data name="OperatorAndAchievementName" xml:space="preserve">
    <value>Use AND (&amp;&amp;) operator</value>
  </data>
  <data name="OperatorAndAchievementDescription" xml:space="preserve">
    <value>Make use of the AND operator</value>
  </data>
  <data name="GotoAchievementName" xml:space="preserve">
    <value>Spaghetti Bolognese </value>
  </data>
  <data name="GotoAchievementDescription" xml:space="preserve">
    <value>Please don't use goto anymore. You've got the achievement, happy now?</value>
  </data>
  <data name="NotOperatorAchievementName" xml:space="preserve">
    <value>Invert!</value>
  </data>
  <data name="NotOperatorAchievementDescription" xml:space="preserve">
    <value>Use a not operator to invert an expression</value>
  </data>
  <data name="StringCompareAchievementName" xml:space="preserve">
    <value>String comparing</value>
  </data>
  <data name="StringCompareAchievementDescription" xml:space="preserve">
    <value>Use the String.Compare method</value>
  </data>
  <data name="StringConcatAchievementName" xml:space="preserve">
    <value>String concaten-what?</value>
  </data>
  <data name="StringConcatAchievementDescription" xml:space="preserve">
    <value>Use the String.Concat method</value>
  </data>
  <data name="StringCopyAchievementName" xml:space="preserve">
    <value>String copying</value>
  </data>
  <data name="StringCopyAchievementDescription" xml:space="preserve">
    <value>Use the String.Copy method</value>
  </data>
  <data name="StringEqualsAchievementName" xml:space="preserve">
    <value>String equals</value>
  </data>
  <data name="StringEqualsAchievementDescription" xml:space="preserve">
    <value>Use the String.Equals method</value>
  </data>
  <data name="StringJoinAchievementName" xml:space="preserve">
    <value>String joining</value>
  </data>
  <data name="StringJoinAchievementDescription" xml:space="preserve">
    <value>Use the String.Join method</value>
  </data>
  <data name="OverloadOperatorAchievementName" xml:space="preserve">
    <value>Operator overload</value>
  </data>
  <data name="OverloadOperatorAchievementDescription" xml:space="preserve">
    <value>Overload an operator</value>
  </data>
  <data name="PlusPlusOperatorAchievementName" xml:space="preserve">
    <value>Use the ++ operator</value>
  </data>
  <data name="PlusPlusOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the ++ operator</value>
  </data>
  <data name="MinusMinusOperatorAchievementName" xml:space="preserve">
    <value>Use the -- operator</value>
  </data>
  <data name="MinusMinusOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the -- operator</value>
  </data>
  <data name="EnumInitializerExplicitAchievementName" xml:space="preserve">
    <value>I'll tell you how to count</value>
  </data>
  <data name="EnumInitializerExplicitAchievementDescription" xml:space="preserve">
    <value>Create an enum with explicit value(s)</value>
  </data>
  <data name="PlusOperatorAchievementName" xml:space="preserve">
    <value>Use the + operator</value>
  </data>
  <data name="PlusOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the + operator</value>
  </data>
  <data name="MinusOperatorAchievementName" xml:space="preserve">
    <value>Use the - operator</value>
  </data>
  <data name="MinusOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the - operator</value>
  </data>
  <data name="MultiplyOperatorAchievementName" xml:space="preserve">
    <value>Use the * operator</value>
  </data>
  <data name="MultiplyOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the * operator</value>
  </data>
  <data name="DivideOperatorAchievementName" xml:space="preserve">
    <value>Use the / operator</value>
  </data>
  <data name="DivideOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the / operator</value>
  </data>
  <data name="ModuloOperatorAchievementName" xml:space="preserve">
    <value>Use the modulo operator</value>
  </data>
  <data name="ModuloOperatorAchievementDescription" xml:space="preserve">
    <value>Write an expression that uses the % operator</value>
  </data>
  <data name="DeclareArrayAchievementName" xml:space="preserve">
    <value>Declare an array</value>
  </data>
  <data name="DeclareArrayAchievementDescription" xml:space="preserve">
    <value>Declare an array</value>
  </data>
  <data name="CreateStaticMethodAchievementName" xml:space="preserve">
    <value>Create a static method</value>
  </data>
  <data name="CreateStaticMethodAchievementDescription" xml:space="preserve">
    <value>Create a static method</value>
  </data>
  <data name="CatchManyExceptionsAchievementName" xml:space="preserve">
    <value>Sir Catch-a-lot</value>
  </data>
  <data name="CatchManyExceptionsAchievementDescription" xml:space="preserve">
    <value>Catch more than 5 exception explicitely</value>
  </data>
  <data name="CreateConstructorAchievementName" xml:space="preserve">
    <value>Bob the Constructor</value>
  </data>
  <data name="CreateConstructorAchievementDescription" xml:space="preserve">
    <value>Write a class constructor</value>
  </data>
  <data name="CreateInterfaceAchievementName" xml:space="preserve">
    <value>Interface</value>
  </data>
  <data name="CreateInterfaceAchievementDescription" xml:space="preserve">
    <value>Create an interface</value>
  </data>
  <data name="UseAsKeywordAchievementName" xml:space="preserve">
    <value>As</value>
  </data>
  <data name="UseAsKeywordAchievementDescription" xml:space="preserve">
    <value>Try explicit cast with AS keyword</value>
  </data>
  <data name="ProgramWithStartupParamsAchievementName" xml:space="preserve">
    <value>Write a program that accepts and uses parameters to startup</value>
  </data>
  <data name="ProgramWithStartupParamsAchievementDescription" xml:space="preserve">
    <value>Write a program that accepts and uses parameters to startup</value>
  </data>
  <data name="PrivateSetterAchievementName" xml:space="preserve">
    <value>Private Setter</value>
  </data>
  <data name="PrivateSetterAchievementDescription" xml:space="preserve">
    <value>Write a property of any type with a private setter</value>
  </data>
  <data name="EnumInitializerAchievementName" xml:space="preserve">
    <value>Create enumeration</value>
  </data>
  <data name="EnumInitializerAchievementDescription" xml:space="preserve">
    <value>Create an enum type.</value>
  </data>
  <data name="IfElseStatementAchievementName" xml:space="preserve">
    <value>Or else what?!</value>
  </data>
  <data name="IfElseStatementAchievementDescription" xml:space="preserve">
    <value>Make use of an if/else statement</value>
  </data>
  <data name="EnumSwitchAchievementName" xml:space="preserve">
    <value>Enumswitch</value>
  </data>
  <data name="EnumSwitchAchievementDescription" xml:space="preserve">
    <value>Switch over an enum</value>
  </data>
  <data name="UpperBoundaryValueFDoubleName" xml:space="preserve">
    <value>Living on the double edge</value>
  </data>
  <data name="UpperBoundaryValueFDoubleDescription" xml:space="preserve">
    <value>Assign the maximal allowed value to a double (beware the overflow!)</value>
  </data>
  <data name="LowerBoundaryValuedoubleName" xml:space="preserve">
    <value>Living on the negative double edge</value>
  </data>
  <data name="LowerBoundaryValuedoubleDescription" xml:space="preserve">
    <value>Assign the minimal allowed value to a double (beware the overflow!)</value>
  </data>
  <data name="DeclareCharName" xml:space="preserve">
    <value>Declare a char</value>
  </data>
  <data name="DeclareCharDescription" xml:space="preserve">
    <value>Declare, but do not initialize, a char in one statement</value>
  </data>
  <data name="JobSecurityAchievementName" xml:space="preserve">
    <value>Job Security</value>
  </data>
  <data name="JobSecurityAchievementDescription" xml:space="preserve">
    <value>Written a LINQ query with over 10 lines of code</value>
  </data>
  <data name="TellingAStoryAchievementName" xml:space="preserve">
    <value>Telling a story</value>
  </data>
  <data name="TellingAStoryAchievementDescription" xml:space="preserve">
    <value>Created a method longer than 100 lines</value>
  </data>
  <data name="EpicTaleAchievementName" xml:space="preserve">
    <value>Epic Tale</value>
  </data>
  <data name="EpicTaleAchievementDescription" xml:space="preserve">
    <value>Created a method longer than 300 lines</value>
  </data>
  <data name="ParametizerAchievementName" xml:space="preserve">
    <value>The Parametizer</value>
  </data>
  <data name="ParametizerAchievementDescription" xml:space="preserve">
    <value>Created a method with more than 10 non optional parameters</value>
  </data>
  <data name="GUTAchievementName" xml:space="preserve">
    <value>Grand Unified Theory</value>
  </data>
  <data name="GUTAchievementDescription" xml:space="preserve">
    <value>Design a class that implements at least 5 interfaces</value>
  </data>
  <data name="EveryOptionEnumAchievementName" xml:space="preserve">
    <value>Every Option Considered</value>
  </data>
  <data name="EveryOptionEnumAchievementDescription" xml:space="preserve">
    <value>Created an enum with more than 10 values</value>
  </data>
  <data name="ProceduralProgrammerAchievementName" xml:space="preserve">
    <value>Procedural Programmer</value>
  </data>
  <data name="ProceduralProgrammerAchievementDescription" xml:space="preserve">
    <value>Created a method with more than 10 out parameters</value>
  </data>
  <data name="TooManyModifiersMethodDeclarationAchievementName" xml:space="preserve">
    <value>Modifier addict</value>
  </data>
  <data name="TooManyModifiersMethodDeclarationAchievementDescription" xml:space="preserve">
    <value>Declare a method with lots of modifiers</value>
  </data>
  <data name="InstantiateObjectAchievementName" xml:space="preserve">
    <value>Objectify!</value>
  </data>
  <data name="InstantiateObjectAchievementDescription" xml:space="preserve">
    <value>Create an object</value>
  </data>
  <data name="IComparableAchievementName" xml:space="preserve">
    <value>IComparable</value>
  </data>
  <data name="IComparableAchievementDescription" xml:space="preserve">
    <value>Write a class that implements IComparable</value>
  </data>
  <data name="IfStatementAchievementName" xml:space="preserve">
    <value>What if...</value>
  </data>
  <data name="IfStatementAchievementDescription" xml:space="preserve">
    <value>Make use of an if statement</value>
  </data>
  <data name="HelloWorldAchievementName" xml:space="preserve">
    <value>Hello world</value>
  </data>
  <data name="HelloWorldAchievementDescription" xml:space="preserve">
    <value>Write the most-writen program ever</value>
  </data>
  <data name="TryCatchRethrowStatementAchievementName" xml:space="preserve">
    <value>Operation:Activate umbrella</value>
  </data>
  <data name="TryCatchRethrowStatementAchievementDescription" xml:space="preserve">
    <value>Write a catch statement that simply rethrows the exception</value>
  </data>
  <data name="ArrayLengthPropertyAchievementName" xml:space="preserve">
    <value>Array length</value>
  </data>
  <data name="ArrayLengthPropertyAchievementDescription" xml:space="preserve">
    <value>Use the Length property of an array</value>
  </data>
  <data name="LambdaExpressionAchievementName" xml:space="preserve">
    <value>Lambda Expression</value>
  </data>
  <data name="LambdaExpressionAchievementDescription" xml:space="preserve">
    <value>Use a lambda expression</value>
  </data>
  <data name="DeclareInitializeCharName" xml:space="preserve">
    <value>Declare and initialize a char</value>
  </data>
  <data name="DeclareInitializeCharDescription" xml:space="preserve">
    <value>Declare and initialize a char in one statement</value>
  </data>
  <data name="UpperBoundaryValueCharName" xml:space="preserve">
    <value>Living on the char edge</value>
  </data>
  <data name="UpperBoundaryValueCharDescription" xml:space="preserve">
    <value>Assign the maximal allowed value to a char (beware the overflow!)</value>
  </data>
  <data name="LowerBoundaryValueCharName" xml:space="preserve">
    <value>Living on the negative char edge</value>
  </data>
  <data name="LowerBoundaryValueCharDescription" xml:space="preserve">
    <value>Assign the minimal allowed value to a char (beware the overflow!)</value>
  </data>
  <data name="CreateMethodMultipleParametersAchievementName" xml:space="preserve">
    <value>Method man and the Wu-Tang Clan</value>
  </data>
  <data name="CreateMethodMultipleParametersAchievementDescription" xml:space="preserve">
    <value>Create a method with 2 or more parameters</value>
  </data>
  <data name="CreateMethodOneParameterAchievementName" xml:space="preserve">
    <value>Method man and a friend</value>
  </data>
  <data name="CreateMethodOneParameterAchievementDescription" xml:space="preserve">
    <value>Create a method with 1 parameter</value>
  </data>
  <data name="BlockCommentAchievementName" xml:space="preserve">
    <value>Block comment</value>
  </data>
  <data name="BlockCommentAchievementDescription" xml:space="preserve">
    <value>Write a block comment</value>
  </data>
  <data name="OverrideEqualsAchievementName" xml:space="preserve">
    <value>Define equality</value>
  </data>
  <data name="OverrideEqualsAchievementDescription" xml:space="preserve">
    <value>Override System.Object.Equals</value>
  </data>
  <data name="CaesarChallengeName" xml:space="preserve">
    <value>Caesar</value>
  </data>
  <data name="CaesarChallengeDescription" xml:space="preserve">
    <value>Write a Caesar encryption/decryption module</value>
  </data>
  <data name="TryFinallyStatementAchievementName" xml:space="preserve">
    <value>Try-Finally Statement</value>
  </data>
  <data name="TryFinallyStatementAchievementDescription" xml:space="preserve">
    <value>Use the a try-finally without a catch statement.</value>
  </data>
  <data name="ForAchievementName" xml:space="preserve">
    <value>For loop</value>
  </data>
  <data name="ForAchievementDescription" xml:space="preserve">
    <value>Use a for loop</value>
  </data>
  <data name="UseConsoleReadlineAchievementName" xml:space="preserve">
    <value>Use Console.ReadLine()</value>
  </data>
  <data name="UseConsoleReadlineAchievementDescription" xml:space="preserve">
    <value>Get input from the user</value>
  </data>
  <data name="IfCompoundExpressionAchievementName" xml:space="preserve">
    <value>Use compound expression in if statement</value>
  </data>
  <data name="IfCompoundExpressionAchievementDescription" xml:space="preserve">
    <value>Make use of multiple expression in one if statement (usage of &amp;&amp;,||, etc. operators)</value>
  </data>
  <data name="UpperBoundaryValueFloatName" xml:space="preserve">
    <value>Living on the floating edge</value>
  </data>
  <data name="UpperBoundaryValueFloatDescription" xml:space="preserve">
    <value>Assign the maximal allowed value to a float (beware the overflow!)</value>
  </data>
  <data name="LowerBoundaryValueFloatName" xml:space="preserve">
    <value>Living on the negative floating edge</value>
  </data>
  <data name="LowerBoundaryValueFloatDescription" xml:space="preserve">
    <value>Assign the minimal allowed value to a float (beware the overflow!)</value>
  </data>
  <data name="UseIsKeywordAchievementName" xml:space="preserve">
    <value>Is</value>
  </data>
  <data name="UseIsKeywordAchievementDescription" xml:space="preserve">
    <value>Create an expression with the IS keyword</value>
  </data>
  <data name="AbstractClassAchievementName" xml:space="preserve">
    <value>Abstract class</value>
  </data>
  <data name="AbstractClassAchievementDescription" xml:space="preserve">
    <value>Create an abstract class</value>
  </data>
  <data name="AbstractMethodAchievementName" xml:space="preserve">
    <value>Abstract method</value>
  </data>
  <data name="AbstractMethodAchievementDescription" xml:space="preserve">
    <value>Create an abstract method</value>
  </data>
  <data name="UsingStatementAchievementName" xml:space="preserve">
    <value>Using statement</value>
  </data>
  <data name="UsingStatementAchievementDescription" xml:space="preserve">
    <value>Use the using-statement</value>
  </data>
  <data name="MultipleDeclareIntName" xml:space="preserve">
    <value>Declare multiple integers in one statement</value>
  </data>
  <data name="MultipleDeclareIntDescription" xml:space="preserve">
    <value>Declare multiple integers in one go</value>
  </data>
  <data name="RefParameterAchievementName" xml:space="preserve">
    <value>Ref Parameter</value>
  </data>
  <data name="RefParameterAchievementDescription" xml:space="preserve">
    <value>Write a method that uses the ref keyword in its arguments</value>
  </data>
  <data name="ArrayClearMethodAchievementName" xml:space="preserve">
    <value>Clear an Augean array</value>
  </data>
  <data name="ArrayClearMethodAchievementDescription" xml:space="preserve">
    <value>Use the Array.Clear method to Clear an array</value>
  </data>
  <data name="ArrayIndexOfMethodAchievementName" xml:space="preserve">
    <value>IndexOf an array</value>
  </data>
  <data name="ArrayIndexOfMethodAchievementDescription" xml:space="preserve">
    <value>Use the Array.IndexOf method to IndexOf an array</value>
  </data>
  <data name="ArrayReverseMethodAchievementName" xml:space="preserve">
    <value>Reverse an array</value>
  </data>
  <data name="ArrayReverseMethodAchievementDescription" xml:space="preserve">
    <value>Use the Array.Reverse method to Reverse an array</value>
  </data>
  <data name="ArraySortMethodAchievementName" xml:space="preserve">
    <value>Sort an array</value>
  </data>
  <data name="ArraySortMethodAchievementDescription" xml:space="preserve">
    <value>Use the Array.Sort method to sort an array</value>
  </data>
  <data name="PrintWithPlaceholdersFieldSizeAchievementName" xml:space="preserve">
    <value>Use placeholders and field size when writing to the screen</value>
  </data>
  <data name="PrintWithPlaceholdersFieldSizeAchievementDescription" xml:space="preserve">
    <value>Print something to the console using placeholders and explicit field sizes</value>
  </data>
  <data name="VirtualMethodAchievementName" xml:space="preserve">
    <value>Virtual Reality</value>
  </data>
  <data name="VirtualMethodAchievementDescription" xml:space="preserve">
    <value>Create a virtual method</value>
  </data>
  <data name="OVerrideMethodAchievementName" xml:space="preserve">
    <value>Override!</value>
  </data>
  <data name="OVerrideMethodAchievementDescription" xml:space="preserve">
    <value>Override a method</value>
  </data>
  <data name="QueryExpressionAchievementName" xml:space="preserve">
    <value>Query Expression</value>
  </data>
  <data name="QueryExpressionAchievementDescription" xml:space="preserve">
    <value>Use a query expression</value>
  </data>
  <data name="ForEachAchievementName" xml:space="preserve">
    <value>Foreach loop</value>
  </data>
  <data name="ForEachAchievementDescription" xml:space="preserve">
    <value>Use a foreach loop</value>
  </data>
  <data name="DeclareInitializeDoubleName" xml:space="preserve">
    <value>Declare and initialize a double</value>
  </data>
  <data name="DeclareInitializeDoubleDescription" xml:space="preserve">
    <value>Declare and initialize a double in one statement</value>
  </data>
  <data name="PrintWithPlaceholdersAchievementName" xml:space="preserve">
    <value>Print with placeholders</value>
  </data>
  <data name="PrintWithPlaceholdersAchievementDescription" xml:space="preserve">
    <value>Print something to the console using placeholders</value>
  </data>
  <data name="ElseIfStatementAchievementName" xml:space="preserve">
    <value>Use else if statement</value>
  </data>
  <data name="ElseIfStatementAchievementDescription" xml:space="preserve">
    <value>Make use of an else if statement</value>
  </data>
  <data name="CreateSingleLineMethodAchievementName" xml:space="preserve">
    <value>That's tiny</value>
  </data>
  <data name="CreateSingleLineMethodAchievementDescription" xml:space="preserve">
    <value>Create a method that only contains one single return expression</value>
  </data>
  <data name="AnonymousObjectAchievementName" xml:space="preserve">
    <value>Anonymous Object</value>
  </data>
  <data name="AnonymousObjectAchievementDescription" xml:space="preserve">
    <value>Create an anonymous object</value>
  </data>
  <data name="TryCatchStatementAchievementName" xml:space="preserve">
    <value>Try-Catch Statement</value>
  </data>
  <data name="TryCatchStatementAchievementDescription" xml:space="preserve">
    <value>Use a try-catch statement</value>
  </data>
  <data name="SwitchAchievementName" xml:space="preserve">
    <value>Multiplexing</value>
  </data>
  <data name="SwitchAchievementDescription" xml:space="preserve">
    <value>Create a switch statement</value>
  </data>
  <data name="CreateBaseConstructorInitAchievementName" xml:space="preserve">
    <value>Call base</value>
  </data>
  <data name="CreateBaseConstructorInitAchievementDescription" xml:space="preserve">
    <value>Call another base constructor using the base() keyword from a constructor</value>
  </data>
  <data name="CastAchievementName" xml:space="preserve">
    <value>Swords to plowshares</value>
  </data>
  <data name="CastAchievementDescription" xml:space="preserve">
    <value>Cast a variable explicitely</value>
  </data>
  <data name="DeclareMultipleDimArrayAchievementName" xml:space="preserve">
    <value>Declare a multidimensional array</value>
  </data>
  <data name="DeclareMultipleDimArrayAchievementDescription" xml:space="preserve">
    <value>Declare a multidimensional array</value>
  </data>
  <data name="CurseAlotAchievementDescription" xml:space="preserve">
    <value>Declare more than 5 variables that have a 'bad word' identifier</value>
  </data>
  <data name="CurseAlotAchievementName" xml:space="preserve">
    <value>How rude...</value>
  </data>
  <data name="SpeechlessAchievementDescription" xml:space="preserve">
    <value>Declare more than 5 variables that have very boring identifiers like 'meh', 'bla', etc.</value>
  </data>
  <data name="SpeechlessAchievementName" xml:space="preserve">
    <value>How original...</value>
  </data>
  <data name="DangerousEqualityCheckAchievementName" xml:space="preserve">
    <value>Double Trouble</value>
  </data>
  <data name="DangerousEqualityCheckAchievementDescription" xml:space="preserve">
    <value>Check for equality between floating point numbers (hint: this could fail)</value>
  </data>
  <data name="CreateDelegateAchievementDescription" xml:space="preserve">
    <value>Declare a delegate</value>
  </data>
  <data name="CreateDelegateAchievementName" xml:space="preserve">
    <value>Nothing is impossible if you can delegate</value>
  </data>
  <data name="CreateEventAchievementDescription" xml:space="preserve">
    <value>Create an event</value>
  </data>
  <data name="CreateEventAchievementName" xml:space="preserve">
    <value>Event of the year?!</value>
  </data>
  <data name="AbortThreadAchievementDescription" xml:space="preserve">
    <value>Abort a thread using Abort()</value>
  </data>
  <data name="AbortThreadAchievementName" xml:space="preserve">
    <value>Abort, abort, abort!</value>
  </data>
  <data name="CreateThreadAchievementDescription" xml:space="preserve">
    <value>Create a thread</value>
  </data>
  <data name="CreateThreadAchievementName" xml:space="preserve">
    <value>Weaver</value>
  </data>
  <data name="JoinThreadAchievementDescription" xml:space="preserve">
    <value>Block a running thread using Join()</value>
  </data>
  <data name="JoinThreadAchievementName" xml:space="preserve">
    <value>Block that thread!</value>
  </data>
  <data name="SleepThreadAchievementDescription" xml:space="preserve">
    <value>Suspends a thread for a specified time.</value>
  </data>
  <data name="SleepThreadAchievementName" xml:space="preserve">
    <value>Nighty night.</value>
  </data>
  <data name="StartThreadAchievementDescription" xml:space="preserve">
    <value>Start a thread</value>
  </data>
  <data name="StartThreadAchievementName" xml:space="preserve">
    <value>Ready, thread...start!</value>
  </data>
</root>